<?php

namespace Drupal\googlebooks\Form;

use Drupal\Core\Form\FormBase;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Form\FormState;
use Drupal\googlebooks\Client\GoogleBooksClient;
use Symfony\Component\DependencyInjection\ContainerInterface;

class GoogleBooksSearchForm extends FormBase {

  /**
   * @var \Drupal\googlebooks\Client\GoogleBooksClient
   */
  private $googleBooksClient;

  public function __construct(GoogleBooksClient $googleBooksClient) {
    $this->googleBooksClient = $googleBooksClient;
  }

  /**
   * {@inheritdoc}
   */
  public static function create(ContainerInterface $container) {
    return new static(
      $container->get('googlebooks.client')
    );
  }

  public function getFormId() {
    return 'googlebooks_form';
  }

  public function buildForm(array $form, FormStateInterface $form_state) {
    $form['booklayout'] = [
      '#type' => 'container',
      '#attributes' => [
        'class' => ['container-inline'],
      ],
    ];
    $form['booklayout']['googlebooksearch'] = [
      '#type' => 'textfield',
      '#title' => $this->t('Google Books Search'),
      '#required' => true
    ];
    $form['actions']['#type'] = 'actions';
    $form['booklayout']['actions']['search'] = [
      '#type' => 'submit',
      '#value' => $this->t('Search'),
      '#button_type' => 'primary',
    ];
    return $form;
  }

  public function validateForm(array &$form, FormStateInterface $form_state) {
    parent::validateForm($form, $form_state); // TODO: Change the autogenerated stub
  }

  public function submitForm(array &$form, FormStateInterface $form_state, $booksearchkeyword = NULL) {
    //$booksearchkeyword = $form_state->getValue('googlebooksearch');
    //$form_state->setRebuild(TRUE);

    $bookquery = $form_state->getValue('googlebooksearch');
    $query = [
      'q' => $bookquery,
      'maxResults' => 5,
      'startIndex' => 0,
    ];
    $books = [];
    $request = $this->googleBooksClient->connect('get', 'books/v1/volumes', $query, []);
    $book_data = json_decode($request, TRUE);
    /*echo '<pre>';
    // useful for debugging and checking which fields actually are in each item of the response
    dpm( $book_data );
    echo '</pre>';*/
    foreach ($book_data["items"] as $key => $value) {
      $books[$key]['thumbnail'] = $value['volumeInfo']['imageLinks']['thumbnail'];
      //$book_thumbnail[] = '<img src="' . $item['volumeInfo']['imageLinks']['thumbnail'] . '"/>"';
      //$book_title[] =  $item['volumeInfo']['title'];
      $books[$key]['title'] = $value['volumeInfo']['title'];
      if (isset($value['volumeInfo']['description'])) {
        $books[$key]['description'] = $value['volumeInfo']['description'];
      }
      else {
        $books[$key]['description'] = NULL;
      }

      if (isset($value['volumeInfo']['industryIdentifiers'])) {
        $books[$key]['isbn'] = $value['volumeInfo']['industryIdentifiers'][1]['identifier'];
      }
      if (isset($value['volumeInfo']["authors"])) {
        foreach ($value['volumeInfo']["authors"] as $author) {
          $books[$key]['authors'][] = $author;
        }
      }

      $books[$key]['publishedDate'] = $value['volumeInfo']['publishedDate'];
      if (isset($value['volumeInfo']['publisher'])) {
        $books[$key]['publisher'] = $value['volumeInfo']['publisher'];
      }

      if ($value['saleInfo']['saleability'] == 'FOR_SALE') {
        $books[$key]['price'] = $value['saleInfo']['listPrice']['amount'];
      }
      else {
        $books[$key]['price'] = 'Not For Sale';
      }
      /* echo '<pre>';
      // useful for debugging and checking which fields actually are in each item of the response
      var_dump( $item );
      echo '</pre>';*/
    }
    //}
    /*echo '<pre>';
    var_dump($books);
    echo '</pre>';*/
    //var_dump($book_title);

    return [
      '#theme' => 'googlebooks_template',
      '#form' => $form,
      '#books' => $books
    ];
    //$rendered = \Drupal::service('renderer')->renderPlain($bookresult);
    //var_dump($rendered);
    //return [\Drupal::messenger()->addMessage($bookquery)];
  }
}